!whitespace: ' ' | '\t' | '\r' | '\n';
!comment: ';' {.} '\n';

_letter
    : 'a'-'z'
    | 'A'-'Z'
;
_initial
    : _letter
    | _special_initial
;
_special_initial
    : '!'
    | '$'
    | '%'
    | '&'
    | '*'
    | '/'
    | ':'
    | '<'
    | '='
    | '?'
    | '^'
    | '_'
    | '~'
;
_digit
    : '0'-'9'
;
_special_subsequent
    : '.' | '+' | '-' | '!' | '?'
;
_subsequent
    : _initial
    | _digit
    | _special_subsequent
;
_peculiar_identifier
    : '+'
    | '-'
    | '.' '.' '.'
;
_identifier
    : _initial { _subsequent }
    | _peculiar_identifier
;
identifier
    : _identifier
;

//
// boolean
//
_boolean_t: '#' 't';
_boolean_f: '#' 'f';
boolean_t: _boolean_t;
boolean_f: _boolean_f;

//
// string
//
_string_element: '\\' '"' | . | '\\' '\\';
_string : '"' { _string_element } '"';
string: _string;

//
// numeric
//
_sign: '+' | '-';
_uint10: _digit { _digit };
_float : [_sign] ['.'] _uint10 | [_sign] _uint10 '.' _digit {_digit};
float: _float;
uint: _uint10;

//
// Syntax start here
//

<<
import (
    "github.com/nnnewb/minilang/pkg/ast"
    "github.com/nnnewb/minilang/pkg/bnf/token"
)
>>

Program
    : Define Program        << $0.(*ast.Define), nil >>
    | Combination Program   << $0.(*ast.Combination), nil >>
    | empty
;

Define
    : "(" "define" Identifier Combination ")" << ast.NewDefine($2.(ast.Identifier), $3.(*ast.Combination)), nil >>
;

Combination
    : "(" "lambda" "(" Formals ")" Combination ")"  << ast.NewCombinationWithOperands(ast.Identifier("lambda"), append([]ast.Node{}, ast.NewFormals($3.([]ast.Identifier)), $5.(*ast.Combination))), nil >>
    | "(" Identifier Operand ")"                    << ast.NewCombinationWithOperands($1.(ast.Identifier), $2.([]ast.Node)), nil >>
    | "(" Identifier ")"                            << ast.NewCombination($1.(ast.Identifier)), nil >>
;

Formals
    : Formals Identifier     << append($0.([]ast.Identifier), $1.(ast.Identifier)), nil >>
    | Identifier            << []ast.Identifier{$0.(ast.Identifier)}, nil >>
;

Operand
    : Value            << []ast.Node{$0.(ast.Node)}, nil >>
    | Operand Value    << append($0.([]ast.Node), $1.(ast.Node)), nil >>
;


BooleanLit
    : boolean_t             << ast.Boolean(true), nil >>
    | boolean_f             << ast.Boolean(false), nil >>
;

Identifier
    : identifier << ast.Identifier(string($0.(*token.Token).Lit)), nil >>
;

Value
    : Identifier            << $0.(ast.Identifier), nil >>
    | BooleanLit            << $0.(ast.Boolean), nil >>
    | float                 << ast.NewFloat(string($0.(*token.Token).Lit)) >>
    | uint                  << ast.NewUInt(string($0.(*token.Token).Lit)) >>
    | string                << ast.String(string($0.(*token.Token).Lit)), nil >>
    | Combination           << $0, nil >>
;
