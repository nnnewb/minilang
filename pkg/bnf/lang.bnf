!whitespace: ' ' | '\t' | '\r' | '\n';
!comment: ';' {.} '\n';

//
// identifier
//
_letter : 'a'-'z' | 'A'-'Z';
_initial: _letter;
_digit  : '0'-'9' ;
_special_subsequent : '.' | '+' | '-' | '!' | '?';
_subsequent: _initial | _digit | _special_subsequent;
_peculiar_identifier: '+' | '-' | '.' '.' '.';
_identifier : _initial { _subsequent } | _peculiar_identifier;
identifier: _identifier;
quoted_identifier: '#' _identifier;

//
// boolean
//
_boolean_t: '#' 't';
_boolean_f: '#' 'f';
boolean_t: _boolean_t;
boolean_f: _boolean_f;

//
// string
//
_string_element: '\\' '"' | . | '\\' '\\';
_string : '"' { _string_element } '"';
string: _string;

//
// number
//
_sign: '+' | '-';
_uint10: _digit { _digit };
_ureal10 : ['.'] _uint10 | _uint10 '.' _digit {_digit};
_number : [_sign] _ureal10;
number: _number;

//
// Syntax start here
//

<<
import (
    "github.com/nnnewb/minilang/pkg/ast"
    "github.com/nnnewb/minilang/pkg/bnf/token"
)
>>

//
// value
//
Value
    : identifier            << ast.Identifier(string($0.(*token.Token).Lit)), nil >>
    | quoted_identifier     << ast.NewQuoted(ast.Identifier(string($0.(*token.Token).Lit[1:]))), nil >>
    | boolean_t             << ast.Boolean(true), nil >>
    | boolean_f             << ast.Boolean(false), nil >>
    | number                << ast.NewNumber(string($0.(*token.Token).Lit)) >>
    | string                << ast.String(string($0.(*token.Token).Lit)), nil >>
    | List                  << $0, nil >>
;

//
// list
//
ListElements
    : Value                 << ast.NewListWithInitial($0.(ast.Node)), nil >>
    | ListElements Value    << $0.(*ast.List).Append($1.(ast.Node)), nil >>
;
List
    : "(" ListElements ")"  << $1, nil >>
    | "(" ")"               << ast.NewList(), nil >>
    | "#(" ListElements ")" << ast.NewQuoted($1.(ast.Node)), nil >>
    | "#(" ")"              << ast.NewQuoted(ast.NewList()), nil >>
;